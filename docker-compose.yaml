version: '3.2'

services:

  nginx:

    image: nginx
    depends_on: [ designer, airflow, notebook ]
    container_name: nginx
    volumes:
      - type: bind
        source: ./DONOTREMOVE/nginx.conf
        target: /etc/nginx/conf.d/nginx.conf
      - ./DONOTREMOVE/cert:/cert
    ports:
      - 443:443
    command: [ "nginx", "-g", "daemon off;" ]

  designer:
    image: kinisi/designer:${KINISI_VER}
    container_name: designer
    environment:
      - BASIC_USERNAME=${USERNAME}
      - BASIC_PASSWORD=${USERPASS}
      - SERVER_NAME=${SERVERNAME}
      - VALIDATE=${VALIDATE}
      - GENALL=${GENALL}
      - DB=/home/kinisi/system/kinisi.db
    volumes:
      - ./system:/home/kinisi/system
      - ./dags:/home/kinisi/dags
      - ./logs:/home/kinisi/logs
      # The following is needed by notebook , airflow , and nginx
      - ./user:/home/kinisi/user
      - ./workarea:/home/kinisi/workarea
      - ./DONOTREMOVE:/home/kinisi/DONOTREMOVE
      - ./certs:/home/kinisi/certs

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
      - PGDATA=/var/lib/postgresql/data/pgdata

  # run as user airflow
  airflow:
    image: kinisi/airflow:${AIRFLOW_VERSION}
    container_name: airflow
    depends_on:
      - postgres
    environment:
      - LOAD_EX=n
      - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - EXECUTOR=Local
      - AIRFLOW__WEBSERVER__BASE_URL=http://x/airflow
    command: webserver
    volumes:
      - ./dags:/home/airflow/dags
      - ./user:/home/airflow/udm
      - ./workarea:/workarea
      - ./system:/home/kinisi/system
      - ./logs:/home/airflow/klogs
      - ./certs:/certs
      - ./pgdata:/var/lib/postgresql/data/pgdata

  notebook:
    image: jupyter/base-notebook
    container_name: notebook
    working_dir: /home/kinisi
    user: root
    volumes:
      - ./dags:/home/kinisi/dags
      - ./user:/home/kinisi/udm
      - ./workarea:/home/kinisi/workarea
      - ./logs:/home/kinisi/logs
      - ./certs:/home/kinisi/certs
    command:
      [
        "jupyter",
        "lab",
        "--allow-root",
        "--no-browser",
        "--NotebookApp.token=''",
        "--NotebookApp.password=''",
        "--NotebookApp.base_url=/pyed"
      ]

  # Test environment
  # https://hub.docker.com/r/ibmcom/db2 , DB2 test environment
  db2:
    image: ibmcom/db2
    hostname: db2host
    container_name: db2
    environment:
      LICENSE: accept
      DBNAME: testdb
      SAMPLEDB: "true"
      DB2INST1_PASSWORD: db2inst1
    privileged: true
    volumes:
      # - ./DB2/config:/database/config
      - ./testenv/DB2/keystore:/keystore
      - ./testenv/DB2/scripts:/var/custom

  http:
    build:
      context: .
      dockerfile: testenv/restapi/dockerfile
    image: "httpapi"
    container_name: restapi_server
    command: python3 app.py

  # MySQL test environment
  mysql_nossl:
    image: mysql:5.7
    container_name: mysql_nossl
    environment:
      MYSQL_DATABASE: sandy
      MYSQL_ROOT_PASSWORD: mysqlinst
    volumes:
      - ./testenv/mysql/nossl/scripts/init1.sql:/docker-entrypoint-initdb.d/init1.sql

  mysql_ssl:
    image: cyprien/mysql-tls:5.7
    container_name: mysql_ssl
    environment:
      MYSQL_DATABASE: sandy
      MYSQL_ROOT_PASSWORD: mysqlinst
    working_dir: /scripts
    volumes:
      - ./testenv/mysql/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
      - ./testenv/mysql/ssl/init1.sql:/docker-entrypoint-initdb.d/init1.sql

networks:
  default:
    external:
      name: kinisi-net
